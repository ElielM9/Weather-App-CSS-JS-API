const FORM=document.querySelector("#search-form"),MAIN__CONTAINER=document.querySelector("#main");function startApp(){eventListeners()}function eventListeners(){FORM.addEventListener("submit",searchWeather)}function searchWeather(e){e.preventDefault();const t=document.querySelector("#city-name").value.trim(),n=document.querySelector("#country-name").value;""!==t&&""!==n?(showLoader(),setTimeout(()=>{consultApi(t,n)},1500)):showError("Por favor, ingrese un nombre de ciudad y país válidos.")}function showError(e){const t=e;if(!document.querySelector(".alert")){const e=document.createElement("div");e.textContent=t,e.classList.add("alert","alert--error"),FORM.appendChild(e),setTimeout(()=>{e.remove()},3e3)}}function consultApi(e,t){fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e},${t}&appid=2d143467c2e890d28d6f09fbd953e757`).then(e=>e.json()).then(e=>{clearHTML(),console.log(e),"404"!==e.cod?showWeather(e):showError("Ciudad no encontrada")})}function showWeather(e){const{name:t,main:{temp:n,temp_max:r,temp_min:o},weather:[{description:a,icon:c}],sys:{country:s}}=e,i=convertKelvinToCelsius(n),d=convertKelvinToCelsius(o),l=convertKelvinToCelsius(r),u=document.createElement("div");u.classList.add("weather-card"),u.innerHTML=`\n    <h2 class="weather-card__location">${t}, ${s}</h2>\n    <p class="weather-card__temperature">${i}&#8451;</p>\n    <img class="weather-card__icon" src="https://openweathermap.org/img/wn/${c}@2x.png" alt="${a} icono">\n    <p class="weather-card__description">${a}</p>\n    <p class="weather-card__range">Min: ${d} / Max: ${l} &#8451;</p>`,MAIN__CONTAINER.appendChild(u)}function convertKelvinToCelsius(e){return parseInt(e-273.15)}function clearHTML(){for(;MAIN__CONTAINER.firstChild;)MAIN__CONTAINER.removeChild(MAIN__CONTAINER.firstChild)}function showLoader(){clearHTML();const e=document.createElement("span");e.classList.add("loader"),MAIN__CONTAINER.appendChild(e)}window.addEventListener("load",startApp);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiRk9STSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIk1BSU5fX0NPTlRBSU5FUiIsInN0YXJ0QXBwIiwiZXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwic2VhcmNoV2VhdGhlciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsIkNJVFlfTkFNRSIsInZhbHVlIiwidHJpbSIsIlNFTEVDVEVEX0NPVU5UUlkiLCJzaG93TG9hZGVyIiwic2V0VGltZW91dCIsImNvbnN1bHRBcGkiLCJzaG93RXJyb3IiLCJtZXNzYWdlIiwiRVJST1JfTUVTU0FHRSIsImFsZXJ0RGl2IiwiY3JlYXRlRWxlbWVudCIsInRleHRDb250ZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmUiLCJjaXR5TmFtZSIsImNvdW50cnlDb2RlIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiZGF0YSIsImNsZWFySFRNTCIsImNvbnNvbGUiLCJsb2ciLCJjb2QiLCJzaG93V2VhdGhlciIsIm5hbWUiLCJtYWluIiwidGVtcCIsInRlbXBfbWF4IiwidGVtcF9taW4iLCJ3ZWF0aGVyIiwiZGVzY3JpcHRpb24iLCJpY29uIiwic3lzIiwiY291bnRyeSIsIkNFTENJVVMiLCJjb252ZXJ0S2VsdmluVG9DZWxzaXVzIiwiVEVNUF9NSU4iLCJURU1QX01BWCIsIldFQVRIRVJfQ0FSRCIsImlubmVySFRNTCIsImtlbHZpbiIsInBhcnNlSW50IiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiTE9BREVSIiwid2luZG93Il0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFPQyxTQUFTQyxjQUFjLGdCQUM5QkMsZ0JBQWtCRixTQUFTQyxjQUFjLFNBSy9DLFNBQVNFLFdBRVBDLGlCQUlGLFNBQVNBLGlCQUNQTCxLQUFLTSxpQkFBaUIsU0FBVUMsZUFJbEMsU0FBU0EsY0FBY0MsR0FDckJBLEVBQUVDLGlCQUdGLE1BQU1DLEVBQVlULFNBQVNDLGNBQWMsY0FBY1MsTUFBTUMsT0FDdkRDLEVBQW1CWixTQUFTQyxjQUFjLGlCQUFpQlMsTUFDN0MsS0FFaEJELEdBRmdCLEtBRWFHLEdBT2pDQyxhQUdBQyxXQUFXLEtBQ1RDLFdBQVdOLEVBQVdHLElBQ3JCLE9BWERJLFVBQVUsMERBZWQsU0FBU0EsVUFBVUMsR0FDakIsTUFBTUMsRUFBZ0JELEVBS3RCLElBRnNCakIsU0FBU0MsY0FBYyxVQUV6QixDQUVsQixNQUFNa0IsRUFBV25CLFNBQVNvQixjQUFjLE9BQ3hDRCxFQUFTRSxZQUFjSCxFQUN2QkMsRUFBU0csVUFBVUMsSUFBSSxRQUFTLGdCQUNoQ3hCLEtBQUt5QixZQUFZTCxHQUdqQkwsV0FBVyxLQUNUSyxFQUFTTSxVQUNSLE1BS1AsU0FBU1YsV0FBV1csRUFBVUMsR0FJNUJDLE1BRlkscURBQXFERixLQUFZQyw0Q0FHMUVFLEtBQU1DLEdBQWFBLEVBQVNDLFFBQzVCRixLQUFNRyxJQUVMQyxZQUVBQyxRQUFRQyxJQUFJSCxHQUdLLFFBQWJBLEVBQUtJLElBT1RDLFlBQVlMLEdBTlZoQixVQUFVLDBCQVdsQixTQUFTcUIsWUFBWUwsR0FDbkIsTUFBTU0sS0FDSkEsRUFDQUMsTUFBTUMsS0FBRUEsRUFBSUMsU0FBRUEsRUFBUUMsU0FBRUEsR0FDeEJDLFVBQVVDLFlBQUVBLEVBQVdDLEtBQUVBLElBQ3pCQyxLQUFLQyxRQUFFQSxJQUNMZixFQUVFZ0IsRUFBVUMsdUJBQXVCVCxHQUNqQ1UsRUFBV0QsdUJBQXVCUCxHQUNsQ1MsRUFBV0YsdUJBQXVCUixHQUdsQ1csRUFBZXBELFNBQVNvQixjQUFjLE9BQzVDZ0MsRUFBYTlCLFVBQVVDLElBQUksZ0JBQzNCNkIsRUFBYUMsVUFBWSw0Q0FDY2YsTUFBU1Msb0RBQ1BDLDRGQUNrQ0gsa0JBQXFCRCx1REFDdkRBLGtEQUNETSxZQUFtQkMsZ0JBRzNEakQsZ0JBQWdCc0IsWUFBWTRCLEdBTTlCLFNBQVNILHVCQUF1QkssR0FDOUIsT0FBT0MsU0FBU0QsRUFBUyxRQUkzQixTQUFTckIsWUFDUCxLQUFPL0IsZ0JBQWdCc0QsWUFDckJ0RCxnQkFBZ0J1RCxZQUFZdkQsZ0JBQWdCc0QsWUFLaEQsU0FBUzNDLGFBRVBvQixZQUVBLE1BQU15QixFQUFTMUQsU0FBU29CLGNBQWMsUUFDdENzQyxFQUFPcEMsVUFBVUMsSUFBSSxVQUVyQnJCLGdCQUFnQnNCLFlBQVlrQyxHQXBJOUJDLE9BQU90RCxpQkFBaUIsT0FBUUYiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvbnN0YW50ZXNcbmNvbnN0IEZPUk0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjc2VhcmNoLWZvcm1gKTtcbmNvbnN0IE1BSU5fX0NPTlRBSU5FUiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNtYWluYCk7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKGBsb2FkYCwgc3RhcnRBcHApO1xuXG4vLyBGdW5jacOzbiBwYXJhIGluaWNpYXIgbGEgYXBwXG5mdW5jdGlvbiBzdGFydEFwcCgpIHtcbiAgLy8gRnVuY2lvbiBkZSBldmVudG9zXG4gIGV2ZW50TGlzdGVuZXJzKCk7XG59XG5cbi8vIEZ1bmNpw7NuIHBhcmEgbWFuZWphciBldmVudG9zXG5mdW5jdGlvbiBldmVudExpc3RlbmVycygpIHtcbiAgRk9STS5hZGRFdmVudExpc3RlbmVyKGBzdWJtaXRgLCBzZWFyY2hXZWF0aGVyKTtcbn1cblxuLy8gRnVuY2nDs24gcGFyYSBidXNjYXIgZWwgY2xpbWFcbmZ1bmN0aW9uIHNlYXJjaFdlYXRoZXIoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgLy8gVmFsaWRhciBlbCBmb3JtdWxhcmlvXG4gIGNvbnN0IENJVFlfTkFNRSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNjaXR5LW5hbWVgKS52YWx1ZS50cmltKCk7XG4gIGNvbnN0IFNFTEVDVEVEX0NPVU5UUlkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjY291bnRyeS1uYW1lYCkudmFsdWU7XG4gIGNvbnN0IFNUUklOR19WT0lEID0gYGA7XG5cbiAgaWYgKENJVFlfTkFNRSA9PT0gU1RSSU5HX1ZPSUQgfHwgU0VMRUNURURfQ09VTlRSWSA9PT0gU1RSSU5HX1ZPSUQpIHtcbiAgICBzaG93RXJyb3IoYFBvciBmYXZvciwgaW5ncmVzZSB1biBub21icmUgZGUgY2l1ZGFkIHkgcGHDrXMgdsOhbGlkb3MuYCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBNb3N0cmFyIGVsIGxvYWRlciBhbnRlcyBkZSBjb25zdWx0YXIgbGEgQVBJXG4gIHNob3dMb2FkZXIoKTtcblxuICAvLyBDb25zdWx0YXIgbGEgQVBJIGRlc3B1w6lzIGRlIDMgc2VndW5kb3NcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgY29uc3VsdEFwaShDSVRZX05BTUUsIFNFTEVDVEVEX0NPVU5UUlkpO1xuICB9LCAxNTAwKTtcbn1cblxuLy8gRnVuY2nDs24gcGFyYSBtb3N0cmFyIGVycm9yXG5mdW5jdGlvbiBzaG93RXJyb3IobWVzc2FnZSkge1xuICBjb25zdCBFUlJPUl9NRVNTQUdFID0gbWVzc2FnZTtcblxuICAvLyBFbGltaW5hciBhbGVydGEgYW50ZXJpb3JcbiAgY29uc3QgcHJldmlvdXNBbGVydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5hbGVydGApO1xuXG4gIGlmICghcHJldmlvdXNBbGVydCkge1xuICAgIC8vIE1vc3RyYXIgYWxlcnRhalxuICAgIGNvbnN0IGFsZXJ0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgZGl2YCk7XG4gICAgYWxlcnREaXYudGV4dENvbnRlbnQgPSBFUlJPUl9NRVNTQUdFO1xuICAgIGFsZXJ0RGl2LmNsYXNzTGlzdC5hZGQoYGFsZXJ0YCwgYGFsZXJ0LS1lcnJvcmApO1xuICAgIEZPUk0uYXBwZW5kQ2hpbGQoYWxlcnREaXYpO1xuXG4gICAgLy8gRWxpbWluYXIgYWxlcnRhIGRlc3B1w6lzIGRlIDMgc2VndW5kb3NcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGFsZXJ0RGl2LnJlbW92ZSgpO1xuICAgIH0sIDMwMDApO1xuICB9XG59XG5cbi8vIEZ1bmNpw7NuIHBhcmEgY29uc3VsdGFyIGxhIEFQSVxuZnVuY3Rpb24gY29uc3VsdEFwaShjaXR5TmFtZSwgY291bnRyeUNvZGUpIHtcbiAgY29uc3QgQVBJX0tFWSA9IGAyZDE0MzQ2N2MyZTg5MGQyOGQ2ZjA5ZmJkOTUzZTc1N2A7XG4gIGNvbnN0IFVSTCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7Y2l0eU5hbWV9LCR7Y291bnRyeUNvZGV9JmFwcGlkPSR7QVBJX0tFWX1gO1xuXG4gIGZldGNoKFVSTClcbiAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgLy8gTGltcGlhciBIVE1MIGFudGVzIGRlIG1vc3RyYXIgcmVzdWx0YWRvc1xuICAgICAgY2xlYXJIVE1MKCk7XG5cbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuXG4gICAgICAvLyBWYWxpZGFyIHF1ZSBsb3MgcmVzdWx0YWRvcyBleGlzdGFuXG4gICAgICBpZiAoZGF0YS5jb2QgPT09IGA0MDRgKSB7XG4gICAgICAgIHNob3dFcnJvcihgQ2l1ZGFkIG5vIGVuY29udHJhZGFgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIE1vc3RyYXIgcmVzdWx0YWRvcyBlbiBlbCBIVE1MXG4gICAgICBzaG93V2VhdGhlcihkYXRhKTtcbiAgICB9KTtcbn1cblxuLy8gRnVuY2nDs24gcGFyYSBtb3N0cmFyIGxvcyByZXN1bHRhZG9zIGVuIGVsIEhUTUxcbmZ1bmN0aW9uIHNob3dXZWF0aGVyKGRhdGEpIHtcbiAgY29uc3Qge1xuICAgIG5hbWUsXG4gICAgbWFpbjogeyB0ZW1wLCB0ZW1wX21heCwgdGVtcF9taW4gfSxcbiAgICB3ZWF0aGVyOiBbeyBkZXNjcmlwdGlvbiwgaWNvbiB9XSxcbiAgICBzeXM6IHsgY291bnRyeSB9LFxuICB9ID0gZGF0YTtcblxuICBjb25zdCBDRUxDSVVTID0gY29udmVydEtlbHZpblRvQ2Vsc2l1cyh0ZW1wKTtcbiAgY29uc3QgVEVNUF9NSU4gPSBjb252ZXJ0S2VsdmluVG9DZWxzaXVzKHRlbXBfbWluKTtcbiAgY29uc3QgVEVNUF9NQVggPSBjb252ZXJ0S2VsdmluVG9DZWxzaXVzKHRlbXBfbWF4KTtcblxuICAvLyBDcmVhciBsYSBjYXJkIHF1ZSBtdWVzdHJhIGVsIGNsaW1hXG4gIGNvbnN0IFdFQVRIRVJfQ0FSRCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYGRpdmApO1xuICBXRUFUSEVSX0NBUkQuY2xhc3NMaXN0LmFkZChgd2VhdGhlci1jYXJkYCk7XG4gIFdFQVRIRVJfQ0FSRC5pbm5lckhUTUwgPSBgXG4gICAgPGgyIGNsYXNzPVwid2VhdGhlci1jYXJkX19sb2NhdGlvblwiPiR7bmFtZX0sICR7Y291bnRyeX08L2gyPlxuICAgIDxwIGNsYXNzPVwid2VhdGhlci1jYXJkX190ZW1wZXJhdHVyZVwiPiR7Q0VMQ0lVU30mIzg0NTE7PC9wPlxuICAgIDxpbWcgY2xhc3M9XCJ3ZWF0aGVyLWNhcmRfX2ljb25cIiBzcmM9XCJodHRwczovL29wZW53ZWF0aGVybWFwLm9yZy9pbWcvd24vJHtpY29ufUAyeC5wbmdcIiBhbHQ9XCIke2Rlc2NyaXB0aW9ufSBpY29ub1wiPlxuICAgIDxwIGNsYXNzPVwid2VhdGhlci1jYXJkX19kZXNjcmlwdGlvblwiPiR7ZGVzY3JpcHRpb259PC9wPlxuICAgIDxwIGNsYXNzPVwid2VhdGhlci1jYXJkX19yYW5nZVwiPk1pbjogJHtURU1QX01JTn0gLyBNYXg6ICR7VEVNUF9NQVh9ICYjODQ1MTs8L3A+YDtcblxuICAvLyBBw7FhZGlyIGxhIGNhcmQgYWwgSFRNTFxuICBNQUlOX19DT05UQUlORVIuYXBwZW5kQ2hpbGQoV0VBVEhFUl9DQVJEKTtcbn1cblxuLyogSEVMUEVSUyAqL1xuXG4vLyBGdW5jacOzbiBwYXJhIGNvbnZlcnRpciBkZSBLZWx2aW4gYSBjZWxjaXVzXG5mdW5jdGlvbiBjb252ZXJ0S2VsdmluVG9DZWxzaXVzKGtlbHZpbikge1xuICByZXR1cm4gcGFyc2VJbnQoa2VsdmluIC0gMjczLjE1KTtcbn1cblxuLy8gRnVuY2nDs24gcGFyYSBsaW1waWFyIGVsIEhUTUxcbmZ1bmN0aW9uIGNsZWFySFRNTCgpIHtcbiAgd2hpbGUgKE1BSU5fX0NPTlRBSU5FUi5maXJzdENoaWxkKSB7XG4gICAgTUFJTl9fQ09OVEFJTkVSLnJlbW92ZUNoaWxkKE1BSU5fX0NPTlRBSU5FUi5maXJzdENoaWxkKTtcbiAgfVxufVxuXG4vLyBGdW5jacOzbiBwYXJhIG1vc3RyYXIgdW4gbG9hZGVyXG5mdW5jdGlvbiBzaG93TG9hZGVyKCkge1xuICAvLyBMaW1waWFyIGVsIEhUTUxcbiAgY2xlYXJIVE1MKCk7XG5cbiAgY29uc3QgTE9BREVSID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgc3BhbmApO1xuICBMT0FERVIuY2xhc3NMaXN0LmFkZChgbG9hZGVyYCk7XG5cbiAgTUFJTl9fQ09OVEFJTkVSLmFwcGVuZENoaWxkKExPQURFUik7XG59XG4iXX0=
